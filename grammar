# Grammar for Ice
# http://www.jusot.com/ice/grammar/

# Start symbols for the grammar:
#       stmt is a single interactive statemnet;
#       stmts is a module or sequence of commands read from an input file;

%token TAT;      // @
%token TATAT;    // @@

%token TUSING;   // using
%token TIF;      // if
%token TELIF;    // elif
%token TELSE;    // else
%token TWHILE;   // while
%token TDO;      // do
%token TFOR;     // for
%token TTO;      // to
%token TFOREACH; // foreach
%token TAS;      // as
%token TBREAK;   // break
%token TCONTINUE;// continue
%token TRETURN;  // return
%token TMATCH;   // match

%token TNEW;     // new

%token TNONE;    // none
%token TTRUE;    // true
%token TFALSE;   // false

%token <std::string> TIDENTIFIER; // [a-zA-Z_][a-zA-Z0-9_]*
%token <int64_t>     TINTEGER;    // [0-9]+
%token <double>      TDOUBLE;     // [0-9]+\.[0-9]*
%token <std::string> TSTRING;     // "[^"\n]"

%token TBLS;       // <<
%token TBRS;       // >>
%token TAND;       // and
%token TOR;        // or
%token TNOT;       // not !
%token TCEQ;       // =
%token TCNE;       // !=
%token TCLT;       // <
%token TCLE;       // <=
%token TCGT;       // >
%token TCGE;       // >=
%token TRET;       // =>
%token TADD;       // +
%token TSUB;       // -
%token TMUL;       // *
%token TDIV;       // /
%token TMOD;       // %
%token TASSIGN;    // %
%token TDOT;       // .
%token TCOMMA;     // ,
%token TLPAREN;    // (
%token TRPAREN;    // )
%token TLBRACKET;  // [
%token TRBRACKET;  // ]
%token TLBRACE;    // {
%token TRBRACE;    // }

%left TOR TAND;
%left TCEQ TCNE TCLT TCLE TCGT TCGE;
%left TBLS TBRS;
%left TADD TSUB;
%left TMUL TDIV TMOD;

%%

%start program;

program
    : stmts
    ;

%type <Ptr<StmtList>> stmts;
stmts
    : %empty
    | stmt stmts
    ;

%type <Ptr<Stmt>> stmt;
stmt
    : decl_or_assign
    | class_decl
    | if_else
    | while_stmt
    | do_while_stmt
    | for_stmt
    | foreach_stmt
    | expr
    | TRETURN expr
    | TUSING ident
    | TCONTINUE
    | TBREAK
    ;

%type <Ptr<Stmt>> decl_or_assign;
decl_or_assign
    : TAT ident decl_tail TASSIGN expr
    | TAT TDOT ident TASSIGN expr
    ;

decl_tail
    : %empty
    | TDOT ident decl_tail
    | TLPAREN call_args TRPAREN decl_tail
    | TLBRACKET expr TRBRACKET decl_tail
    ;

block
    : TLBRACE stmts TRBRACE
    ;

func_decl_args
    : ident
    | ident TCOMMA func_decl_args
    | ident TASSIGN expr
    | ident TASSIGN expr TCOMMA func_decl_args
    ;

%type <Ptr<IdentifierExpr>> ident;
ident
    : TIDENTIFIER
    ;

%type <Ptr<Expr>> numeric;
numeric
    : TINTEGER
    | TDOUBLE
    ;

%type <Ptr<BoolExpr>> boolean;
boolean
    : TTRUE
    | TFALSE
    ;

%type <Ptr<StringExpr>> string;
string
    : TSTRING
    ;

%type <Ptr<Expr>> expr;
expr
    : expr TOR expr
    | expr TAND expr
    | expr TCEQ expr
    | expr TCNE expr
    | expr TCLT expr
    | expr TCLE expr
    | expr TCGT expr
    | expr TCGE expr
    | expr TBLS expr
    | expr TBRS expr
    | expr TADD expr
    | expr TSUB expr
    | expr TMUL expr
    | expr TDIV expr
    | expr TMOD expr
    | term
    | TLBRACE enumerators TRBRACE
    | TLBRACE dictionary TRBRACE
    ;

%type <Ptr<Expr>> term;
term
    : ident_or_other
    | numeric
    | boolean
    | string
    | TNOT term
    | TSUB term
    | TLPAREN expr TRPAREN
    | lambda_expr
    | new_expr
    | match_expr
    | list_expr
    | TNONE
    ;

ident_or_other
    : ident another_tail
    ;

another_tail
    : %empty
    | TDOT ident another_tail
    | TLPAREN call_args TRPAREN another_tail
    | TLBRACKET expr TRBRACKET another_tail
    ;

call_args
    : %empty
    | expr call_args_tail
    ;

call_args_tail
    : %empty
    | TCOMMA expr call_args_tail
    ;

if_else
    : TIF expr block if_else_tail
    ;

if_else_tail
    : %empty
    | TELIF block if_else_tail
    | TELSE block
    ;

while_stmt
    : TWHILE expr block
    ;

do_while_stmt
    : TDO block TWHILE expr
    ;

for_stmt
    : TFOR expr TTO expr TAS ident block
    | TFOR expr TTO expr block
    ;

foreach_stmt
    : TFOREACH expr TAS ident block
    ;

lambda_expr
    : TAT TLPAREN TRPAREN block decl_tail
    | TAT TLPAREN func_decl_args TRPAREN block decl_tail
    ;

class_decl
    : TATAT ident TLPAREN TRPAREN block
    | TATAT ident TLPAREN func_decl_args TRPAREN block
    ;

new_expr
    : TNEW ident TLPAREN call_args TRPAREN
    ;

enumerators
    : %empty
    | ident enumerators_rest
    ;

enumerators_rest
    : %empty
    | TCOMMA enumerators
    ;

dictionary
    : expr TASSIGN expr dictionary_rest
    ;

dictionary_rest
    : %empty
    | TCOMMA dictionary
    ;

match_expr
    : TMATCH expr TLBRACE matches TRBRACE
    | TMATCH expr TLBRACE matches TRBRACE TELSE expr
    ;

matches
    : expr call_args_tail TRET expr matches_rest
    ;

matches_rest
    : %empty
    | TCOMMA matches
    ;

list_expr
    : TLBRACKET call_args TRBRACKET
    ;
