# Grammar for Ice
# http://www.jusot.com/ice/grammar/

# Start symbols for the grammar:
#       stmt is a single interactive statemnet;
#       stmts is a module or sequence of commands read from an input file;

%token TAT;      // @
%token TATAT;    // @@

%token TUSING;   // using
%token TIF;      // if
%token TELIF;    // elif
%token TELSE;    // else
%token TWHILE;   // while
%token TDO;      // do
%token TFOR;     // for
%token TTO;      // to
%token TFOREACH; // foreach
%token TAS;      // as
%token TBREAK;   // break
%token TCONTINUE;// continue
%token TRETURN;  // return
%token TMATCH;   // match

%token TNEW;     // new

%token TNONE;    // none
%token TTRUE;    // true
%token TFALSE;   // false

%token TIDENTIFIER; // [a-zA-Z_][a-zA-Z0-9_]*
%token TINTEGER;    // [0-9]+
%token TDOUBLE;     // [0-9]+\.[0-9]*
%token TSTRING;     // "[^"\n]"

%token TBLS;       // <<
%token TBRS;       // >>
%token TAND;       // and
%token TOR;        // or
%token TNOT;       // not !
%token TCEQ;       // =
%token TCNE;       // !=
%token TCLT;       // <
%token TCLE;       // <=
%token TCGT;       // >
%token TCGE;       // >=
%token TRET;       // =>
%token TADD;       // +
%token TSUB;       // -
%token TMUL;       // *
%token TDIV;       // /
%token TMOD;       // %
%token TASSIGN;    // %
%token TDOT;       // .
%token TCOMMA;     // ,
%token TLPAREN;    // (
%token TRPAREN;    // )
%token TLBRACKET;  // [
%token TRBRACKET;  // ]
%token TLBRACE;    // {
%token TRBRACE;    // }

%%

%start program;

program
    : stmts
    ;

stmts
    : %empty
    | stmt stmts
    ;

stmt
    : decl_or_assign
    | class_decl
    | if_else
    | while_stmt
    | do_while_stmt
    | for_stmt
    | foreach_stmt
    | expr
    | TRETURN expr
    | TUSING ident
    | TCONTINUE
    | TBREAK
    ;

decl_or_assign
    : TAT ident term_tail TASSIGN expr
    | TAT TDOT ident TASSIGN expr
    ;

term_tail
    : %empty
    | TDOT ident term_tail
    | TLPAREN call_args TRPAREN term_tail
    | TLBRACKET expr TRBRACKET term_tail
    ;

block
    : TLBRACE stmts TRBRACE
    ;

ident
    : TIDENTIFIER
    ;

numeric
    : TINTEGER
    | TDOUBLE
    ;

none
    : TNONE
    ;

boolean
    : TTRUE
    | TFALSE
    ;

string
    : TSTRING
    ;

expr
    : expr2 TOR expr2
    | expr2 TAND expr2
    ;

expr2
    : expr3 TCEQ expr3
    | expr3 TCNE expr3
    | expr3 TCLT expr3
    | expr3 TCLE expr3
    | expr3 TCGT expr3
    | expr3 TCGE expr3
    ;

expr3
    : expr4 TBLS expr4
    | expr4 TBRS expr4
    ;

expr4
    : expr5 TADD expr5
    | expr5 TSUB expr5
    ;

expr5
    : expr6 TMUL expr6
    | expr6 TDIV expr6
    | expr6 TMOD expr6
    | expr6
    ;

expr6
    : TNOT expr6
    | TSUB expr6
    | term term_tail
    ;

term
    : ident
    | numeric
    | none
    | boolean
    | string
    | TLPAREN expr TRPAREN
    | lambda_expr
    | new_expr
    | match_expr
    | list_expr
    | enum_expr
    | dict_expr
    ;

call_args
    : %empty
    | expr call_args_rest
    ;

call_args_rest
    : %empty
    | TCOMMA expr call_args_rest
    ;

if_else
    : TIF expr block if_else_tail
    ;

if_else_tail
    : %empty
    | TELIF block if_else_tail
    | TELSE block
    ;

while_stmt
    : TWHILE expr block
    ;

do_while_stmt
    : TDO block TWHILE expr
    ;

for_stmt
    : TFOR expr TTO expr TAS ident block
    | TFOR expr TTO expr block
    ;

foreach_stmt
    : TFOREACH expr TAS ident block
    ;

lambda_expr
    : TAT TLPAREN decl_args TRPAREN lambda_decl_tail
    ;

decl_args
    : %empty
    | ident decl_args_rest
    | ident TASSIGN expr decl_args_rest
    ;

decl_args_rest
    : %empty
    | TCOMMA ident decl_args_rest
    | TCOMMA ident TASSIGN expr decl_args_rest
    ;

lambda_decl_tail
    : TASSIGN expr
    | block
    ;

class_decl
    : TATAT ident TLPAREN bases TRPAREN block
    ;

bases:
    : %empty
    | ident bases_rest
    ;

bases_rest
    : %empty
    | TCOMMA ident bases_rest
    ;

new_expr
    : TNEW ident TLPAREN call_args TRPAREN
    ;

enum_expr
    : TLBRACE ident enum_rest TRBRACE
    ;

enum_rest
    : %empty
    | TCOMMA ident enum_rest
    ;

dict_expr
    : TLBRACE TRBRACE
    | TLBRACE expr TASSIGN expr dict_rest TRBRACE
    ;

dict_rest
    : %empty
    | TCOMMA expr TASSIGN expr dict_rest
    ;

match_expr
    : TMATCH expr TLBRACE TRBRACE match_tail
    | TMATCH expr TLBRACE expr call_args_rest TRET expr match_rest TRBRACE match_tail
    ;

match_rest
    : %empty
    | TCOMMA expr call_args_rest TRET expr match_rest
    ;

match_tail
    : %empty
    | TELSE expr
    ;

list_expr
    : TLBRACKET call_args TRBRACKET
    ;
