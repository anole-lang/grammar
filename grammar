# grammar for anole
# http: //www.jusot.com/anole/grammar/

# start symbols for the grammar:
#       stmt is a single interactive statemnet;
#       stmts is a module or sequence of commands read from an input file;

%token At;       // @
%token Atat;     // @@

%token Use;      // use
%token From;     // from
%token Prefixop; // prefixop
%token Infixop;  // infixop
%token If;       // if
%token Elif;     // elif
%token Else;     // else
%token While;    // while
%token Do;       // do
%token Foreach;  // foreach
%token As;       // as
%token Break;    // break
%token Continue; // continue
%token Return;   // return
%token Match;    // match
%token Delay;    // delay

%token New;      // new
%token Enum;     // enum

%token None;     // none
%token True;     // true
%token False;    // false

%token Identifier;  // [^ 0-9_#@.:;?\(\)\[\]\{\}"]+
%token Integer;     // [0-9]+
%token Double;      // [0-9]+\.[0-9]*
%token String;      // "[^"\n]"

%token BLS;        // <<
%token BRH;        // >>
%token And;        // and
%token Or;         // or
%token Not;        // not !
%token Is;         // is
%token CEQ;        // =
%token CNE;        // !=
%token CLT;        // <
%token CLE;        // <=
%token CGT;        // >
%token CGE;        // >=
%token Ret;        // =>
%token Add;        // +
%token Sub;        // -
%token Mul;        // *
%token Div;        // /
%token Mod;        // %
%token Colon;      // :
%token Semicolon;  // ;
%token Dot;        // .
%token Dooot;      // ...
%token Comma;      // ,
%token LParen;     // (
%token RParen;     // )
%token LBracket;   // [
%token RBracket;   // ]
%token LBrace;     // {
%token RBrace;     // }
%token Ques;       // ?

%%

%start program;

program
    : stmts
    ;

stmts
    : %empty
    | stmt stmts
    | stmt Semicolon stmts
    ;

stmt
    : declaration
    | class_decl
    | prefixop_decl
    | infixop_decl
    | if_else
    | while_stmt
    | do_while_stmt
    | foreach_stmt
    | expr
    | return_stmt
    | use_stmt
    | Continue
    | Break
    ;

declaration
    : At ident
    | At declident Colon delay_expr
    | At declident Comma declident idents
    | At declident Comma declident idents Colon delay_expr exprs
    | At ident LParen parameters RParen lambda_decl_tail
    ;

declident
    : ident
    | BAnd ident
    ;

declidents
    : %empty
    | Comma declident declidents
    ;

block
    : LBrace stmts RBrace
    | Comma stmt
    ;

ident
    : Identifier
    ;

numeric
    : Integer
    | Double
    ;

none
    : None
    ;

boolean
    : True
    | False
    ;

string
    : String
    ;

expr
    : expr0 Ques expr Comma expr
    | expr0
    ;

expr0
    : expr1 Or expr0
    | expr1
    ;

expr1
    : expr2 And expr1
    | expr2
    ;

expr2
    : expr3 CEQ expr2
    | expr3 CNE expr2
    | expr3 CLT expr2
    | expr3 CLE expr2
    | expr3 CGT expr2
    | expr3 CGE expr2
    | expr3
    ;

expr3
    : expr4 BLS expr3
    | expr4 BRH expr3
    | expr4
    ;

expr4
    : expr5 Add expr4
    | expr5 Sub expr4
    | expr5
    ;

expr5
    : expr6 Is  expr5
    | expr6 Mul expr5
    | expr6 Div expr5
    | expr6 Mod expr5
    | expr6
    ;

expr6
    : expr7 UserInfixOp expr6     // UserInfixOp defined by infixop
    | expr7
    ;

expr7
    : Not expr7
    | Sub expr7
    | UserPrefixOp                // UserPrefixOp defined by prefixop
    | term term_tail
    | term term_tail Colon delay_expr
    ;

term
    : ident
    | numeric
    | none
    | boolean
    | string
    | LParen expr RParen
    | lambda_expr
    | new_expr
    | match_expr
    | list_expr
    | enum_expr
    | dict_expr
    ;

term_tail
    : %empty
    | Dot ident term_tail
    | LParen arguments RParen term_tail
    | LBracket expr RBracket term_tail
    ;

arguments
    : %empty
    | delay_expr arguments_rest
    | delay_expr Dooot arguments_rest
    ;

arguments_rest
    : %empty
    | Comma delay_expr arguments_rest
    ;

delay_expr
    : expr
    | Delay expr
    ;

prefixop_decl
    : Prefixop Identifier
    ;

infixop_decl
    : Infixop Integer Identifier
    ;

if_else
    : If expr block if_else_tail
    ;

if_else_tail
    : %empty
    | Elif block if_else_tail
    | Else block
    ;

while_stmt
    : While expr block
    ;

do_while_stmt
    : Do block While expr
    ;

foreach_stmt
    : Foreach expr block
    | Foreach expr As ident block
    ;

lambda_expr
    : At LParen parameters RParen lambda_decl_tail
    ;

parameter
    : ident
    | BAnd ident
    ;

parameter_with_value
    : ident Colon expr
    | BAnd ident Colon expr
    ;

parameters
    : %empty
    | parameter parameters_rest
    | parameter_with_value parameters_with_value_rest
    | Dooot parameter
    ;

parameters_rest
    : %empty
    | Comma parameter parameters_rest
    | Comma parameter_with_value parameters_with_value_rest
    | Dooot parameter
    ;

parameters_with_value_rest
    : %empty
    | Comma parameter_with_value parameters_with_value_rest
    | Dooot parameter
    ;

lambda_decl_tail
    : Colon delay_expr exprs
    | block
    ;

class_decl
    : Atat ident LParen bases RParen block
    ;

bases:
    : %empty
    | ident bases_rest
    ;

bases_rest
    : %empty
    | Comma ident bases_rest
    ;

new_expr
    : New ident LParen arguments RParen
    ;

enum_expr
    : Enum LBrace enums RBrace
    ;

enums
    : %empty
    | ident enums
    | ident Colon Integer enums_rest
    ;

enums_rest
    : %empty
    | Comma ident enums_rest
    | Comma ident Colon Integer enums_rest
    ;

dict_expr
    : LBrace RBrace
    | LBrace expr Ret expr dict_rest RBrace
    ;

dict_rest
    : %empty
    | Comma expr Ret expr dict_rest
    ;

match_expr
    : Match expr LBrace RBrace match_tail
    | Match expr LBrace expr arguments_rest Ret expr match_rest RBrace match_tail
    ;

match_rest
    : %empty
    | Comma expr arguments_rest Ret expr match_rest
    ;

match_tail
    : %empty
    | Else expr
    ;

list_expr
    : LBracket RBracket
    | LBracket expr exprs RBracket
    ;

return_stmt
    : Return delay_expr exprs
    ;

exprs
    : %empty
    | Comma delay_expr exprs
    ;

use_stmt
    : Use Mul From module
    | Use alias_modules
    | Use alias_idents From module
    ;

module
    : string
    | ident
    ;

alias_module
    : module As ident
    ;

alias_modules
    : alias_module
    | alias_module Comma alias_idents
    ;

alias_ident
    : ident
    | ident As ident
    ;

alias_idents
    : alias_ident
    | alias_ident Comma alias_idents
    ;
